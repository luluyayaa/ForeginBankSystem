{"remainingRequest":"D:\\BaiduSyncdisk\\Vue\\VueExample\\Work_Fex\\Front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\BaiduSyncdisk\\Vue\\VueExample\\Work_Fex\\Front\\src\\components\\charts\\CodeInput.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"D:\\BaiduSyncdisk\\Vue\\VueExample\\Work_Fex\\Front\\src\\components\\charts\\CodeInput.vue","mtime":1653725155241},{"path":"D:\\BaiduSyncdisk\\Vue\\VueExample\\Work_Fex\\Front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1653721695552},{"path":"D:\\BaiduSyncdisk\\Vue\\VueExample\\Work_Fex\\Front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1653721695794},{"path":"D:\\BaiduSyncdisk\\Vue\\VueExample\\Work_Fex\\Front\\node_modules\\postcss-loader\\src\\index.js","mtime":1653655565063},{"path":"D:\\BaiduSyncdisk\\Vue\\VueExample\\Work_Fex\\Front\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1653721699373},{"path":"D:\\BaiduSyncdisk\\Vue\\VueExample\\Work_Fex\\Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653721692173},{"path":"D:\\BaiduSyncdisk\\Vue\\VueExample\\Work_Fex\\Front\\node_modules\\vue-loader\\lib\\index.js","mtime":1653721695794}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi53aWRlLWRyb3Bkb3duIHsNCiAgd2lkdGg6IDYwMHB4ICFpbXBvcnRhbnQ7DQp9DQo="},{"version":3,"sources":["CodeInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA","file":"CodeInput.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <!-- state: 用户选择的内容\r\n       fetch-suggestions: 通过给出 queryString, callback 来填充提示框的内容\r\n       trigger-on-focus: 是否获取焦点之后会立即触发搜索\r\n       debounce: 查询触发阈值，用户输入间隔大于某个值之后再进行搜索\r\n       select: 自动提示框的信息（用户选中的 item）\r\n  -->\r\n  <el-autocomplete\r\n    style=\"width: 100%\"\r\n    size=\"small\"\r\n    placeholder=\"代码/简称\"\r\n    :fetch-suggestions=\"querySearchAsync\"\r\n    :trigger-on-focus=\"false\"\r\n    :debounce=\"100\"\r\n    @select=\"updateInput\"\r\n    v-model=\"state\"\r\n  >\r\n  </el-autocomplete>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"CodeInput\",\r\n  data() {\r\n    return {\r\n      state: \"\",\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    // 根据 queryString 的值来联想用户会输入哪些值\r\n    querySearchAsync(queryString, callback) {\r\n      // 从后台服务查询数据\r\n      let list = [\r\n        {\r\n          code: 1,\r\n          name: \"平安银行\",\r\n          value: \"000001-平安银行\",\r\n        },\r\n        {\r\n          code: 600000,\r\n          name: \"浦发银行\",\r\n          value: \"600000-浦发银行\",\r\n        },\r\n      ];\r\n\r\n      // 通知自动提示框的组件在提示框要显示的内容\r\n      callback(list);\r\n    },\r\n\r\n    updateInput(item) {\r\n      // 不这样学习的原因是因为，000001 会被简化为 1，而我们想要的不是数学数字，而是这个值\r\n      // 1 --> 0000001 --> 000001\r\n      // this.state = item.code;\r\n      this.state = (\"000000\" + item.code).slice(-6);\r\n\r\n      // 用消息总线通知\r\n      this.$bus.emit(\"codeinput-selected\", item);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.wide-dropdown {\r\n  width: 600px !important;\r\n}\r\n</style>\r\n"]}]}